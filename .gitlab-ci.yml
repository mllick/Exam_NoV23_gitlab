image: docker:latest
services:
  - name: docker:dind
    alias: docker

variables:
  DOCKER_IMAGE_PREFIX: "sarrlick"
  KUBE_NAMESPACE_DEV: dev
  KUBE_NAMESPACE_QA: qa
  KUBE_NAMESPACE_STAGING: staging
  KUBE_NAMESPACE_PROD: prod
  DOCKER_DRIVER: "overlay2"
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  IP_DEV: 46.51.198.133
  IP_QA: 46.51.198.133
  IP_STAGING: 46.51.198.133
  IP_PROD: 46.51.198.133
  NODEPORT_DEV: 30000
  NODEPORT_QA: 30001
  NODEPORT_STAGING: 30002
  NODEPORT_PROD: 30003


stages:
  - Test acceptation
  - build
  - Release image
  - Deploy dev
  - Deploy qa
  - Deploy staging
  - Deploy prod

.test acceptation:
  stage: Test acceptation
  image: python:latest
  before_script:
    # Show docker daemon info (optional, good for debugging)
    # - sudo apt install python3-pip -y
  script:
    #- pip install -r requirements.txt
    - sudo apt-get install -y python3-pip
    - pip install fastapi
    - pip install pytest
    - pip install httpx
    - cd app/
    - python3 -m pytest

before_script:
  - docker info

build_gateway:
  stage: build
  script:
    - ls -l
    - docker build -t gateway ./gateway
    - docker save -o gateway/gateway.tar gateway
  artifacts:
    paths:
      - gateway/gateway.tar

build_users:
  stage: build
  script:
    - ls -l
    - docker build -t users ./users
    - docker save -o users/users.tar users
  artifacts:
    paths:
      - users/users.tar

build_orders:
  stage: build
  script:
    - ls -l
    - docker build -t orders ./orders
    - docker save -o orders/orders.tar orders
  artifacts:
    paths:
      - orders/orders.tar

release image:
  stage: Release image
  script:
    - ls -l  # Affiche le contenu du répertoire de travail
    - ls -l gateway/gateway.tar || true
    - docker load < gateway/gateway.tar
    - docker tag gateway "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag gateway "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

    - docker load < users/users.tar
    - docker tag users "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag users "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

    - docker load < orders/orders.tar
    - docker tag orders "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag orders "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

deploy-dev:
  stage: Deploy dev
  environment:
    name: dev-$CI_COMMIT_REF_NAME
    url: http://$IP_DEV:$NODEPORT_DEV
    on_stop: stop_dev

  variables:
    NAMESPACE: dev

  script:
    - apps=("app-gateway" "app-orders" "app-users")
    - port="$NODEPORT_DEV"

    # Déploiement de chaque application
    for app in "${apps[@]}"; do
      echo "Deploying $app to namespace $NAMESPACE with NodePort $port"

      rm -rf .kube
      mkdir .kube
      ls
      cp $KUBE_CONFIG .kube/config

      # Utilisation du nom de l'application pour déterminer le chemin et le nom du fichier values.yaml
      cp $app/values.yaml values.yml
      cat values.yml

      # Ajout de gestion des erreurs
      if ! sudo helm upgrade --install $app $app/ \
        --values=values.yml \
        --namespace $NAMESPACE \
        --set image.repository="$CI_REGISTRY_IMAGE" \
        --set image.tag="$CI_COMMIT_SHORT_SHA" \
        --set service.nodeport="$port"; then
        echo "Error deploying $app"
        exit 1
      fi

      echo "$app deployed successfully"
    done


deploy-qa:
  stage: Deploy qa
  script:
    - helm upgrade gateway ./gateway-chart --namespace $KUBE_NAMESPACE_QA --values=values.yaml
    - helm upgrade users ./users-chart --namespace $KUBE_NAMESPACE_QA --values=values.yaml
    - helm upgrade orders ./orders-chart --namespace $KUBE_NAMESPACE_QA --values=values.yaml

deploy-staging:
  stage: Deploy staging
  script:
    - sudo helm upgrade --install gateway ./gateway-chart --namespace $KUBE_NAMESPACE_STAGING --values=values.yaml
    - sudo helm upgrade --install users ./users-chart --namespace $KUBE_NAMESPACE_STAGING --values=values.yaml
    - sudo helm upgrade --install orders ./orders-chart --namespace $KUBE_NAMESPACE_STAGING --values=values.yaml

deploy-prod:
  stage: Deploy prod
  script:
    - sudo helm upgrade --install gateway ./gateway-chart --namespace $KUBE_NAMESPACE_PROD --values=values.yaml
    - sudo helm upgrade --install users ./users-chart --namespace $KUBE_NAMESPACE_PROD --values=values.yaml
    - sudo helm upgrade --install orders ./orders-chart --namespace $KUBE_NAMESPACE_PROD --values=values.yaml
  environment:
    name: $KUBE_NAMESPACE_PROD
  only:
    - main
  when: manual
