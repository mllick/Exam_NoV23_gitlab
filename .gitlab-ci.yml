image: docker:latest
services:
  - name: docker:dind
    alias: docker

variables:
  DOCKER_IMAGE_PREFIX: "sarrlick"
  KUBE_NAMESPACE_DEV: "dev"
  KUBE_NAMESPACE_QA: "qa"
  KUBE_NAMESPACE_STAGING: "staging"
  KUBE_NAMESPACE_PROD: "prod"
  DOCKER_DRIVER: "overlay2"
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME


stages:
  - Kubeconfig
  - Kubectl
  - Permissions
  - Test acceptation
  - build
  - Release image
  - Deploy dev
  - Deploy qa
  - Deploy staging
  - Deploy prod

debug kubeconfig:
stage: Kubeconfig
  script:
    - cat $KUBECONFIG

debug kubectl:
stage: Kubectl
  script:
    - kubectl --kubeconfig=$KUBECONFIG --v=9 get pods

debug permissions:
stage: Permissions
  script:
    - ls -l $KUBECONFIG



.test acceptation:
  stage: Test acceptation
  image: python:latest
  before_script:
    # Show docker daemon info (optional, good for debugging)
    # - sudo apt install python3-pip -y
  script:
    #- pip install -r requirements.txt
    - sudo apt-get install -y python3-pip
    - pip install fastapi
    - pip install pytest
    - pip install httpx
    - cd app/
    - python3 -m pytest

.before_script:
  - docker info

.build_gateway:
  stage: build
  script:
    - ls -l
    - docker build -t gateway ./gateway
    - docker save -o gateway/gateway.tar gateway
  artifacts:
    paths:
      - gateway/gateway.tar

.build_users:
  stage: build
  script:
    - ls -l
    - docker build -t users ./users
    - docker save -o users/users.tar users
  artifacts:
    paths:
      - users/users.tar

.build_orders:
  stage: build
  script:
    - ls -l
    - docker build -t orders ./orders
    - docker save -o orders/orders.tar orders
  artifacts:
    paths:
      - orders/orders.tar

.release image:
  stage: Release image
  script:
    - ls -l  # Affiche le contenu du r√©pertoire de travail
    - ls -l gateway/gateway.tar || true
    - docker load < gateway/gateway.tar
    - docker tag gateway "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag gateway "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

    - docker load < users/users.tar
    - docker tag users "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag users "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

    - docker load < orders/orders.tar
    - docker tag orders "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag orders "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

.deploy-dev:
  stage: Deploy dev
  script:
    - helm upgrade --install gateway ./gateway-chart --namespace $KUBE_NAMESPACE_DEV --values=values.yaml
    - helm upgrade --install users ./users-chart --namespace $KUBE_NAMESPACE_DEV --values=values.yaml
    - helm upgrade --install orders ./orders-chart --namespace $KUBE_NAMESPACE_DEV --values=values.yaml

.deploy-qa:
  stage: Deploy qa
  script:
    - helm upgrade gateway ./gateway-chart --namespace $KUBE_NAMESPACE_QA --values=values.yaml
    - helm upgrade users ./users-chart --namespace $KUBE_NAMESPACE_QA --values=values.yaml
    - helm upgrade orders ./orders-chart --namespace $KUBE_NAMESPACE_QA --values=values.yaml

.deploy-staging:
  stage: Deploy staging
  script:
    - helm upgrade --install gateway ./gateway-chart --namespace $KUBE_NAMESPACE_STAGING --values=values.yaml
    - helm upgrade --install users ./users-chart --namespace $KUBE_NAMESPACE_STAGING --values=values.yaml
    - helm upgrade --install orders ./orders-chart --namespace $KUBE_NAMESPACE_STAGING --values=values.yaml

.deploy-prod:
  stage: Deploy prod
  script:
    - helm upgrade --install gateway ./gateway-chart --namespace $KUBE_NAMESPACE_PROD --values=values.yaml
    - helm upgrade --install users ./users-chart --namespace $KUBE_NAMESPACE_PROD --values=values.yaml
    - helm upgrade --install orders ./orders-chart --namespace $KUBE_NAMESPACE_PROD --values=values.yaml
  environment:
    name: $KUBE_NAMESPACE_PROD
  only:
    - main
  when: manual
